[project]
authors = [
  {name = "Marcel Hild", email = "hild@b4mad.net"},
]
dependencies = [
  "loguru>=0.7.3", # Modern logging
  "pydantic>=2.11.5", # Data validation and settings
  "pydantic-settings>=2.0.0", # Settings management
  "typer>=0.9.0", # CLI framework
  "rich>=13.0.0", # Rich terminal output
  "python-dotenv>=1.0.0", # Environment variable management
  "agno==1.7.6",
  "anthropic>=0.57.1",
  "yfinance>=0.2.65",
  "lancedb>=0.24.1",
  "tantivy>=0.24.0",
  "openai>=1.95.0",
  "sqlalchemy>=2.0.41",
  "pylance>=0.31.1",
  "duckduckgo-search>=8.1.1",
  "fastapi>=0.116.1",
  "uvicorn>=0.35.0",
  "ddgs>=9.0.2",
  "langfuse>=3.1.3",
  "opentelemetry-sdk>=1.35.0",
  "opentelemetry-exporter-otlp>=1.35.0",
  "openinference-instrumentation-agno>=0.1.8",
  "exa-py>=1.14.16",
  "google-genai>=1.25.0",
  "google-cloud-storage>=2.10.0",
  "pytest-bdd>=8.1.0",
  "unstructured>=0.18.5",
  "markdown>=3.8.2",
  "jira>=3.8.0",
  "mcp>=1.11.0",
  "pygithub>=2.6.1",
  "html2text>=2025.4.15",
  "google-auth-oauthlib>=1.2.2",
  "google-api-python-client>=2.176.0",
  "google-auth-httplib2>=0.2.0",
  "pypdf>=5.8.0",
  "bs4>=0.0.2",
  "html-to-markdown[lxml]>=1.8.0",
  "crawl4ai>=0.7.1",
  "langchain-core>=0.3.29",
  "pyyaml>=6.0.0",
  "tomli>=2.2.1",
]
description = "RHDH Sidekick - A locally-running agentic system designed as your personal engineering assistant"
license = {text = "Apache-2.0"}
name = "sidekick"
readme = "README.md"
requires-python = ">=3.13,<3.14"
version = "0.1.0"

[project.scripts]
sidekick = "sidekick:main"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# Code quality with Ruff
[tool.ruff]
line-length = 120
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive linting rules
fixable = ["ALL"]
ignore = [
  "B008", # Do not perform function call in argument defaults (normal for typer)
  "B023", # Function definition does not bind loop variable (common pattern)
]
select = ["E", "F", "W", "I", "B", "UP", "PT", "SIM"]
unfixable = []

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

# Testing configuration
[tool.pytest.ini_options]
addopts = "-v --tb=short --strict-markers"
bdd_features_base_dir = "tests/bdd/features"
filterwarnings = [
  "ignore::pydantic.warnings.PydanticDeprecatedSince20",
]
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "e2e: End-to-end tests",
  "bdd: Behavior Driven Development tests",
  "slow: Slow running tests",
  "performance: Performance tests and benchmarks",
]
python_classes = ["Test*"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

# Coverage configuration
[tool.coverage.run]
omit = ["tests/*", "*/migrations/*"]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
]

# Development dependencies
[dependency-groups]
dev = [
  "ruff>=0.11.12", # Linting and formatting
  "pytest>=8.4.0", # Testing framework
  "pytest-asyncio>=1.0.0", # Async testing support
  "pytest-cov>=6.1.1", # Coverage reporting
  "pre-commit>=3.0.0", # Git hooks
  "mypy>=1.16.1",
  "types-PyYAML",
]
docs = [
  "pdoc>=14.0.0", # API documentation
  "mkdocs>=1.5.0", # Documentation site
  "mkdocs-material>=9.0.0", # Material theme
]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
# Relaxed settings for now - can be made stricter later
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
explicit_package_bases = true
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
